// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/karambo3a/wbtech_test_task/internal/model"
)

// MockOrderServiceInterface is a mock of OrderServiceInterface interface.
type MockOrderServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOrderServiceInterfaceMockRecorder
}

// MockOrderServiceInterfaceMockRecorder is the mock recorder for MockOrderServiceInterface.
type MockOrderServiceInterfaceMockRecorder struct {
	mock *MockOrderServiceInterface
}

// NewMockOrderServiceInterface creates a new mock instance.
func NewMockOrderServiceInterface(ctrl *gomock.Controller) *MockOrderServiceInterface {
	mock := &MockOrderServiceInterface{ctrl: ctrl}
	mock.recorder = &MockOrderServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderServiceInterface) EXPECT() *MockOrderServiceInterfaceMockRecorder {
	return m.recorder
}

// CloseConsumer mocks base method.
func (m *MockOrderServiceInterface) CloseConsumer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseConsumer")
}

// CloseConsumer indicates an expected call of CloseConsumer.
func (mr *MockOrderServiceInterfaceMockRecorder) CloseConsumer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseConsumer", reflect.TypeOf((*MockOrderServiceInterface)(nil).CloseConsumer))
}

// GetOrder mocks base method.
func (m *MockOrderServiceInterface) GetOrder(orderUID string) (*model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", orderUID)
	ret0, _ := ret[0].(*model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockOrderServiceInterfaceMockRecorder) GetOrder(orderUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockOrderServiceInterface)(nil).GetOrder), orderUID)
}

// SaveOrder mocks base method.
func (m *MockOrderServiceInterface) SaveOrder(msg []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrder", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOrder indicates an expected call of SaveOrder.
func (mr *MockOrderServiceInterfaceMockRecorder) SaveOrder(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrder", reflect.TypeOf((*MockOrderServiceInterface)(nil).SaveOrder), msg)
}
